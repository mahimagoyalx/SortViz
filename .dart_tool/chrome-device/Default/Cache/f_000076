define(['dart_sdk'], (function load__packages__sortviz__service__sorting_service_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var sorting_service = Object.create(dart.library);
  var $toString = dartx.toString;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $truncate = dartx.truncate;
  var $toInt = dartx.toInt;
  var $split = dartx.split;
  var $toLowerCase = dartx.toLowerCase;
  var $map = dartx.map;
  var $toUpperCase = dartx.toUpperCase;
  var $substring = dartx.substring;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    SortL: () => (T.SortL = dart.constFn(dart.legacy(sorting_service.Sort)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    StreamControllerOfListLOfintL: () => (T.StreamControllerOfListLOfintL = dart.constFn(async.StreamController$(T.ListLOfintL())))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    intLToNull: () => (T.intLToNull = dart.constFn(dart.fnType(core.Null, [T.intL()])))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    FutureLOfvoid: () => (T.FutureLOfvoid = dart.constFn(dart.legacy(T.FutureOfvoid())))(),
    intLAndintLAndintLToFutureLOfvoid: () => (T.intLAndintLAndintLToFutureLOfvoid = dart.constFn(dart.fnType(T.FutureLOfvoid(), [T.intL(), T.intL(), T.intL()])))(),
    FutureOfintL: () => (T.FutureOfintL = dart.constFn(async.Future$(T.intL())))(),
    FutureLOfintL: () => (T.FutureLOfintL = dart.constFn(dart.legacy(T.FutureOfintL())))(),
    intLAndintLToFutureLOfintL: () => (T.intLAndintLToFutureLOfintL = dart.constFn(dart.fnType(T.FutureLOfintL(), [T.intL(), T.intL()])))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    StringLToStringL: () => (T.StringLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.StringL()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: sorting_service.Sort.prototype,
        [_name$]: "Sort.MERGE_SORT",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: sorting_service.Sort.prototype,
        [_name$]: "Sort.QUICK_SORT",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: sorting_service.Sort.prototype,
        [_name$]: "Sort.SELECTION_SORT",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: sorting_service.Sort.prototype,
        [_name$]: "Sort.BUBBLE_SORT",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: sorting_service.Sort.prototype,
        [_name$]: "Sort.INSERTION_SORT",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: sorting_service.Sort.prototype,
        [_name$]: "Sort.HEAP_SORT",
        index: 5
      });
    },
    get C6() {
      return C[6] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T.SortL());
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = ["package:sortviz/service/sorting_service.dart"];
  var _name$ = dart.privateName(sorting_service, "_name");
  sorting_service.Sort = class Sort extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (sorting_service.Sort.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = sorting_service.Sort.prototype;
  dart.addTypeTests(sorting_service.Sort);
  dart.addTypeCaches(sorting_service.Sort);
  dart.setMethodSignature(sorting_service.Sort, () => ({
    __proto__: dart.getMethods(sorting_service.Sort.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(sorting_service.Sort, I[0]);
  dart.setFieldSignature(sorting_service.Sort, () => ({
    __proto__: dart.getFields(sorting_service.Sort.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(sorting_service.Sort, ['toString']);
  sorting_service.Sort.MERGE_SORT = C[0] || CT.C0;
  sorting_service.Sort.QUICK_SORT = C[1] || CT.C1;
  sorting_service.Sort.SELECTION_SORT = C[2] || CT.C2;
  sorting_service.Sort.BUBBLE_SORT = C[3] || CT.C3;
  sorting_service.Sort.INSERTION_SORT = C[4] || CT.C4;
  sorting_service.Sort.HEAP_SORT = C[5] || CT.C5;
  sorting_service.Sort.values = C[6] || CT.C6;
  var duration = dart.privateName(sorting_service, "SortingService.duration");
  var arr = dart.privateName(sorting_service, "SortingService.arr");
  var _pause = dart.privateName(sorting_service, "_pause");
  var _size = dart.privateName(sorting_service, "_size");
  var _height = dart.privateName(sorting_service, "_height");
  var _streamController = dart.privateName(sorting_service, "_streamController");
  sorting_service.SortingService = class SortingService extends core.Object {
    get duration() {
      return this[duration];
    }
    set duration(value) {
      this[duration] = value;
    }
    get arr() {
      return this[arr];
    }
    set arr(value) {
      super.arr = value;
    }
    get stream() {
      return this[_streamController].stream;
    }
    get pause() {
      return this[_pause];
    }
    set size(size) {
      this[_size] = size;
      this.shuffle();
    }
    get size() {
      return this[_size];
    }
    set height(height) {
      this[_height] = height;
    }
    dispose() {
      this[_streamController].close();
    }
    shuffle() {
      this[_pause] = true;
      this.arr[$clear]();
      for (let i = 0; i < dart.notNull(this[_size]); i = i + 1) {
        this.arr[$add](dart.notNull(math.Random.new().nextInt(dart.notNull(this[_height]) - 40)) + 20);
      }
      this[_streamController].add(this.arr);
    }
    sort(sort) {
      return async.async(dart.void, (function* sort$() {
        this[_pause] = false;
        switch (sort) {
          case C[0] || CT.C0:
          {
            yield this.mergeSort(0, dart.notNull(this[_size]) - 1);
            break;
          }
          case C[1] || CT.C1:
          {
            yield this.quickSort(0, dart.notNull(this[_size]) - 1);
            break;
          }
          case C[2] || CT.C2:
          {
            yield this.selectionSort();
            break;
          }
          case C[3] || CT.C3:
          {
            yield this.bubbleSort();
            break;
          }
          case C[4] || CT.C4:
          {
            yield this.insertionSort();
            break;
          }
          case C[5] || CT.C5:
          {
            yield this.heapSort();
            break;
          }
        }
        this[_pause] = true;
      }).bind(this));
    }
    bubbleSort() {
      return async.async(dart.dynamic, (function* bubbleSort() {
        for (let i = 0; i < dart.notNull(this.arr[$length]); i = i + 1) {
          for (let j = 0; j < dart.notNull(this.arr[$length]) - i - 1; j = j + 1) {
            if (dart.notNull(this.arr[$_get](j)) > dart.notNull(this.arr[$_get](j + 1))) {
              let temp = this.arr[$_get](j);
              this.arr[$_set](j, this.arr[$_get](j + 1));
              this.arr[$_set](j + 1, temp);
            }
            if (!dart.test(this[_pause])) {
              yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
            } else {
              return;
            }
          }
        }
      }).bind(this));
    }
    selectionSort() {
      return async.async(dart.dynamic, (function* selectionSort() {
        for (let i = 0; i < dart.notNull(this.arr[$length]); i = i + 1) {
          for (let j = i + 1; j < dart.notNull(this.arr[$length]); j = j + 1) {
            if (dart.notNull(this.arr[$_get](i)) > dart.notNull(this.arr[$_get](j))) {
              let temp = this.arr[$_get](j);
              this.arr[$_set](j, this.arr[$_get](i));
              this.arr[$_set](i, temp);
            }
            if (!dart.test(this[_pause])) {
              yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
            } else {
              return;
            }
          }
        }
      }).bind(this));
    }
    insertionSort() {
      return async.async(dart.dynamic, (function* insertionSort() {
        for (let i = 1; i < dart.notNull(this.arr[$length]); i = i + 1) {
          let temp = this.arr[$_get](i);
          let j = i - 1;
          while (j >= 0 && dart.notNull(temp) < dart.notNull(this.arr[$_get](j))) {
            this.arr[$_set](j + 1, this.arr[$_get](j));
            j = j - 1;
            if (!dart.test(this[_pause])) {
              yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
            } else {
              return;
            }
          }
          this.arr[$_set](j + 1, temp);
          if (!dart.test(this[_pause])) {
            yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
          } else {
            return;
          }
        }
      }).bind(this));
    }
    mergeSort(leftIndex, rightIndex) {
      return async.async(dart.dynamic, (function* mergeSort() {
        const merge = (leftIndex, middleIndex, rightIndex) => {
          return async.async(dart.void, (function* merge() {
            let leftSize = dart.notNull(middleIndex) - dart.notNull(leftIndex) + 1;
            let rightSize = dart.notNull(rightIndex) - dart.notNull(middleIndex);
            let leftList = T.ListOfintL().generate(leftSize, dart.fn(index => null, T.intLToNull()));
            let rightList = T.ListOfintL().generate(rightSize, dart.fn(index => null, T.intLToNull()));
            for (let i = 0; i < leftSize; i = i + 1) {
              leftList[$_set](i, this.arr[$_get](dart.notNull(leftIndex) + i));
            }
            for (let j = 0; j < rightSize; j = j + 1) {
              rightList[$_set](j, this.arr[$_get](dart.notNull(middleIndex) + j + 1));
            }
            let i = 0;
            let j = 0;
            let k = leftIndex;
            while (i < leftSize && j < rightSize) {
              if (dart.notNull(leftList[$_get](i)) <= dart.notNull(rightList[$_get](j))) {
                this.arr[$_set](k, leftList[$_get](i));
                i = i + 1;
              } else {
                this.arr[$_set](k, rightList[$_get](j));
                j = j + 1;
              }
              k = dart.notNull(k) + 1;
              if (!dart.test(this[_pause])) {
                yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
              } else {
                return;
              }
            }
            while (i < leftSize) {
              this.arr[$_set](k, leftList[$_get](i));
              i = i + 1;
              k = dart.notNull(k) + 1;
              if (!dart.test(this[_pause])) {
                yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
              } else {
                return;
              }
            }
            while (j < rightSize) {
              this.arr[$_set](k, rightList[$_get](j));
              j = j + 1;
              k = dart.notNull(k) + 1;
              if (!dart.test(this[_pause])) {
                yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
              } else {
                return;
              }
            }
          }).bind(this));
        };
        dart.fn(merge, T.intLAndintLAndintLToFutureLOfvoid());
        if (!dart.test(this[_pause]) && dart.notNull(leftIndex) < dart.notNull(rightIndex)) {
          let middleIndex = ((dart.notNull(rightIndex) + dart.notNull(leftIndex)) / 2)[$truncate]();
          yield this.mergeSort(leftIndex, middleIndex);
          if (!dart.test(this[_pause])) {
            yield this.mergeSort(middleIndex + 1, rightIndex);
          }
          if (!dart.test(this[_pause])) {
            yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
          }
          if (!dart.test(this[_pause])) {
            yield merge(leftIndex, middleIndex, rightIndex);
          }
        }
      }).bind(this));
    }
    quickSort(leftIndex, rightIndex) {
      return async.async(dart.dynamic, (function* quickSort() {
        const _partition = (left, right) => {
          return async.async(T.intL(), (function* _partition() {
            let p = (dart.notNull(left) + (dart.notNull(right) - dart.notNull(left)) / 2)[$toInt]();
            let temp = this.arr[$_get](p);
            this.arr[$_set](p, this.arr[$_get](right));
            this.arr[$_set](right, temp);
            if (!dart.test(this[_pause])) {
              yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
            } else {
              return T.FutureOfintL().value(0);
            }
            let cursor = left;
            for (let i = left; dart.notNull(i) < dart.notNull(right); i = dart.notNull(i) + 1) {
              if (dart.dtest(dart.dsend(this.cf(this.arr[$_get](i), this.arr[$_get](right)), '<=', [0]))) {
                let temp = this.arr[$_get](i);
                this.arr[$_set](i, this.arr[$_get](cursor));
                this.arr[$_set](cursor, temp);
                cursor = dart.notNull(cursor) + 1;
                if (!dart.test(this[_pause])) {
                  yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
                } else {
                  break;
                }
              }
            }
            temp = this.arr[$_get](right);
            this.arr[$_set](right, this.arr[$_get](cursor));
            this.arr[$_set](cursor, temp);
            if (!dart.test(this[_pause])) {
              yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(this.arr), T.dynamicTovoid()));
            }
            return cursor;
          }).bind(this));
        };
        dart.fn(_partition, T.intLAndintLToFutureLOfintL());
        if (!dart.test(this[_pause]) && dart.notNull(leftIndex) < dart.notNull(rightIndex)) {
          let p = (yield _partition(leftIndex, rightIndex));
          if (!dart.test(this[_pause])) {
            yield this.quickSort(leftIndex, dart.notNull(p) - 1);
          }
          if (!dart.test(this[_pause])) {
            yield this.quickSort(dart.notNull(p) + 1, rightIndex);
          }
        }
      }).bind(this));
    }
    cf(a, b) {
      if (dart.notNull(a) < dart.notNull(b)) {
        return -1;
      } else if (dart.notNull(a) > dart.notNull(b)) {
        return 1;
      } else {
        return 0;
      }
    }
    heapSort() {
      return async.async(dart.dynamic, (function* heapSort() {
        for (let i = (dart.notNull(this.arr[$length]) / 2)[$truncate](); i >= 0; i = i - 1) {
          if (!dart.test(this[_pause])) {
            yield this.heapify(this.arr, this.arr[$length], i);
          } else {
            break;
          }
        }
        for (let i = dart.notNull(this.arr[$length]) - 1; i >= 0; i = i - 1) {
          let temp = this.arr[$_get](0);
          this.arr[$_set](0, this.arr[$_get](i));
          this.arr[$_set](i, temp);
          if (!dart.test(this[_pause])) {
            yield this.heapify(this.arr, i, 0);
          } else {
            break;
          }
        }
      }).bind(this));
    }
    heapify(arr, n, i) {
      return async.async(dart.dynamic, (function* heapify() {
        let largest = i;
        let l = 2 * dart.notNull(i) + 1;
        let r = 2 * dart.notNull(i) + 2;
        if (l < dart.notNull(n) && dart.notNull(arr[$_get](l)) > dart.notNull(arr[$_get](largest))) {
          largest = l;
        }
        if (r < dart.notNull(n) && dart.notNull(arr[$_get](r)) > dart.notNull(arr[$_get](largest))) {
          largest = r;
        }
        if (largest != i) {
          let temp = arr[$_get](i);
          arr[$_set](i, arr[$_get](largest));
          arr[$_set](largest, temp);
          this.heapify(arr, n, largest);
        }
        if (!dart.test(this[_pause])) {
          yield async.Future.delayed(new core.Duration.new({milliseconds: this.duration})).then(dart.void, dart.fn(_ => this[_streamController].add(arr), T.dynamicTovoid()));
        } else {
          return;
        }
      }).bind(this));
    }
  };
  (sorting_service.SortingService.new = function() {
    this[_pause] = true;
    this[_size] = 50;
    this[_height] = null;
    this[duration] = 500;
    this[arr] = T.JSArrayOfintL().of([]);
    this[_streamController] = T.StreamControllerOfListLOfintL().new();
    ;
  }).prototype = sorting_service.SortingService.prototype;
  dart.addTypeTests(sorting_service.SortingService);
  dart.addTypeCaches(sorting_service.SortingService);
  dart.setMethodSignature(sorting_service.SortingService, () => ({
    __proto__: dart.getMethods(sorting_service.SortingService.__proto__),
    dispose: dart.fnType(dart.void, []),
    shuffle: dart.fnType(dart.dynamic, []),
    sort: dart.fnType(dart.void, [dart.legacy(sorting_service.Sort)]),
    bubbleSort: dart.fnType(dart.dynamic, []),
    selectionSort: dart.fnType(dart.dynamic, []),
    insertionSort: dart.fnType(dart.dynamic, []),
    mergeSort: dart.fnType(dart.dynamic, [dart.legacy(core.int), dart.legacy(core.int)]),
    quickSort: dart.fnType(dart.dynamic, [dart.legacy(core.int), dart.legacy(core.int)]),
    cf: dart.fnType(dart.dynamic, [dart.legacy(core.int), dart.legacy(core.int)]),
    heapSort: dart.fnType(dart.dynamic, []),
    heapify: dart.fnType(dart.dynamic, [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setGetterSignature(sorting_service.SortingService, () => ({
    __proto__: dart.getGetters(sorting_service.SortingService.__proto__),
    stream: dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.int))))),
    pause: dart.legacy(core.bool),
    size: dart.legacy(core.int)
  }));
  dart.setSetterSignature(sorting_service.SortingService, () => ({
    __proto__: dart.getSetters(sorting_service.SortingService.__proto__),
    size: dart.legacy(core.int),
    height: dart.legacy(core.int)
  }));
  dart.setLibraryUri(sorting_service.SortingService, I[0]);
  dart.setFieldSignature(sorting_service.SortingService, () => ({
    __proto__: dart.getFields(sorting_service.SortingService.__proto__),
    [_pause]: dart.fieldType(dart.legacy(core.bool)),
    [_size]: dart.fieldType(dart.legacy(core.int)),
    [_height]: dart.fieldType(dart.legacy(core.int)),
    duration: dart.fieldType(dart.legacy(core.int)),
    arr: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    [_streamController]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(core.List$(dart.legacy(core.int))))))
  }));
  sorting_service['SortExtension|get#name'] = function SortExtension$124get$35name($this) {
    return dart.toString($this)[$split](".")[$_get](1)[$split]("_")[$map](T.StringL(), dart.fn(str => str[$toLowerCase](), T.StringLToStringL()))[$map](T.StringL(), dart.fn(str => str[$_get](0)[$toUpperCase]() + str[$substring](1), T.StringLToStringL()))[$join](" ");
  };
  dart.trackLibraries("packages/sortviz/service/sorting_service.dart", {
    "package:sortviz/service/sorting_service.dart": sorting_service
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sorting_service.dart"],"names":[],"mappings":"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","file":"../../../../packages/sortviz/service/sorting_service.dart.lib.js"}');
  // Exports:
  return {
    service__sorting_service: sorting_service
  };
}));

//# sourceMappingURL=sorting_service.dart.lib.js.map
